import os
import nmap
import socket
import platform

port_scanner = nmap.PortScanner()

#relevent_dt is a list that holds IP addresses that are valid and scanned
relevant_dt = []
#suspicious_dt is a list that holds IP addresses that are invalid and can't be scanned 
suspicious_dt = []
#scan_log is a dictionary that holds who initiated the scan and device information
scan_log = {}
#failed_log is a dictionary that holds who initiated the scan and the IP address that was attempted to be scanned
failed_log = {}

if os.geteuid() != 0:
    raise PermissionError("Unable to run as root. Use sudo.")

def is_valid_ip(ip):
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False


print("Vulnerability Testing using Nmap")
name = input("Please enter your name: ")
safety_question = input("Is this an IP address that you are legally allowed to scan? (yes/no): ")

if safety_question.lower() == "yes":
    print("You may proceed")
    target_ip_address = input("Input IP address to scan: ").strip()
    
    try:
        import socket
        socket.inet_aton(target_ip_address)
        print("The IP address to be scanned is: ", target_ip_address)
        relevant_dt.append(target_ip_address)
    except socket.error:
        print("Invalid IP address format.")
        suspicious_dt.append(target_ip_address)
        exit(1)
while True:
        result = input("""\nWhat test would you like to run?
        a. Complete Scan
        b. UDP Scan
        c. SYN-ACK Scan
        d. Exit
        \nChoose an option (a/b/c/d): """)
        system_dict = {}
        system_dict["System Name: "] = platform.system()
        system_dict["Device Name: "] =  platform.node()
        system_dict["Release: "] = platform.release()
        system_dict["Version: "] = platform.version()
        system_dict["Machine Type: "] = platform.machine()
        system_dict ["Processor: "] =  platform.processor()
        
        if result == 'd':
            print("This program is exiting Thank you for using my Vulnerability Tester!")
            break
        try:
            if name in scan_log.keys():
                obj_list = []
                obj_list.append(system_dict)
                scan_log[name] = obj_list
            else:
                 scan_log[name] = system_dict
            print("\nYou have chosen option: ", result)
            print( """\nYou would see the following details:
                1. Information about your device
                2. Information about the scan you selected. 
                Please note that your scan request has been logged.
                    \n""")
            print(scan_log)
            if result == 'a':
                port_scanner.scan(target_ip_address, '1-1024', '-v -sS -sV -sC -A -O')
                print(port_scanner.scaninfo())
                print("IP Status: ", port_scanner[target_ip_address].state())
                print(port_scanner[target_ip_address].all_protocols())
                print("Open Ports: ", port_scanner[target_ip_address]['tcp'].keys())
                print("This was run with Nmap Version: ", port_scanner.nmap_version())
            elif result == 'b':
                port_scanner.scan(target_ip_address, '1-1024', '-v -sU')
                print(port_scanner.scaninfo())
                print("IP Status: ", port_scanner[target_ip_address].state())
                print(port_scanner[target_ip_address].all_protocols())
                print("Open Ports: ", port_scanner[target_ip_address]['udp'].keys())
                print("This was run with Nmap Version: ", port_scanner.nmap_version())
            elif result == 'c':
                port_scanner.scan(target_ip_address, '1-1024', '-v -sS')
                print(port_scanner.scaninfo())
                print("IP Status: ", port_scanner[target_ip_address].state())
                print(port_scanner[target_ip_address].all_protocols())
                print("Open Ports: ", port_scanner[target_ip_address]['tcp'].keys())
                print("This was run with Nmap Version: ", port_scanner.nmap_version())
            else:
                print("Invalid Option Selected")
        except Exception as e:
            print("An error occurred: ", str(e))
else:
    target = input("Input IP address to scan: ")
    failed_log[name] = target
    suspicious_dt.append(target)
    print("Scanning public addresses or other individuals, and corporations' private addresses is illegal. This program is exiting.")
    exit(1)